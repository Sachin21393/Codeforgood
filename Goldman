q1->class Solution{
  public:
    vector<vector<string> > Anagrams(vector<string>& string_list) {
   
        vector<vector<string>>res;
        unordered_map<string,vector<string>>mp;
        for(int i=0;i<string_list.size();i++){
            string x=string_list[i];
            sort(x.begin(),x.end());
            mp[x].push_back(string_list[i]);
        }
        for(auto it:mp){
            res.push_back(it.second);
        }
        return res;
        
    }
};




Q2->
class Solution {
  public:
    int doOverlap(int L1[], int R1[], int L2[], int R2[]) {
        // code here
        if(L1[0]>R2[0] || L2[0]>R1[0]) return false;
        if(R1[1]>L2[1] || R2[1]>L1[1]) return false;
        return true;
    }
};


Q3->
class Solution{
  public:
    int countSubArrayProductLessThanK(const vector<int>& nums, int n, long long k) {
        int i=0,j=0;
        long long ans=1;
      long long count=0;
        while(j<nums.size()){
            ans*=nums[j];
            if(ans<k){
                count+=j-i+1;
            }else if(ans>=k){
                while(ans>=k){
                    ans/=nums[i];
                    i++;
                }
                count+=j-i+1;
            }
            j++;
            
        }
        return count;
    }
};
q4->string encode(string src)
{     
  //Your code here 
  int count=1;
  string res="";
  for(int i=0;i<src.length();i++){
      if(src[i]==src[i+1]){
          count++;
      }else{
          res=res+src[i]+to_string(count);
          count=1;
      }
  }
     
     return res;
}     
 
 q5->	ull getNthUglyNo(int n) {
	    // code here
	     if (n == 1 or n == 2 or n == 3 or n == 4 or n == 5)
        return n;
 
    set<long long int> s;
    s.insert(1);
    n--;
 
    while (n) {
        auto it = s.begin();
 
     
        long long int x = *it;
 

        s.erase(it);
 
    
        s.insert(x * 2);
        s.insert(x * 3);
        s.insert(x * 5);
        n--;
    }
 
    return *s.begin();
	}
  
  q->6
      if(str1+str2!=str2+str1) return "";
      else 
       return str1.substr(0,gcd(str1.length(),str2.length()));

       q->7
         string ans;
        stack<int> st;
        int num = 1;
        for(auto it:s){
            if(it == 'D'){
                st.push(num);
                num++;
            }else{
                st.push(num);
                num++;
                while(!st.empty()){
                    ans += to_string(st.top());
                    st.pop();
                }
            }
        }
        st.push(num);
        while(!st.empty()){
            ans += to_string(st.top());
            st.pop();
        }
        return ans;
    }
};

q->8
if (m <= n - k + 1)
        return m + k - 1;
 
  
    m = m - (n - k + 1);
 
    
   if(m%n==0) return m;
   else return m%n;
   
   q->9
   	public:
const int mod= 1e9+7;
long long dp[10004];
long long solve(string &s, int n)
{
if (s[0] == '0' || s[0]== ' ')
return 0;
if (n == 0 || n == 1)
return 1;

if(dp[n]!=-1)return dp[n]%mod;

int count = 0;

if (s[n - 1] > '0')
count = solve(s, n - 1)%mod;

if (s[n - 2] == '1' || (s[n - 2] == '2' && s[n - 1] < '7'))
count = (count%mod + solve(s, n - 2)%mod)%mod;

return dp[n]= count%mod;
}
int CountWays(string str){
// Code here
memset(dp,-1,sizeof dp);
return solve(str,str.size())%1000000007;
}

Q 10->
 stack<char> st;
    for (int i = 0; i < s.length(); i++) {
    
        if (s[i] == ']') {
            string temp;
            while (!st.empty() && st.top() != '[') {
              
                temp = st.top() + temp;
                st.pop();
            }

            st.pop();
            string num;

            while (!st.empty() && isdigit(st.top())) {
                num = st.top() + num;
                st.pop();
            }
            int number = stoi(num);
            string repeat;
            for (int j = 0; j < number; j++)
                repeat += temp;
            for (char c : repeat)
                st.push(c);
        }
      
        else
            st.push(s[i]);
    }
    string res;
    while (!st.empty()) {
        res = st.top() + res;
        st.pop();
    }
    return res;
    
    Q 11->
      int *ans=new int[2];
        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            mp[arr[i]]++;
        }
       for(int i=1;i<n+1;i++){
           if(mp[arr[i]]>1){
               ans[0]=arr[i];
           }
       }
        for(int i=1;i<=n;i++){
            if(mp[i]==0){
                ans[1]=i;
                break;
            }
        }
        return ans;
        
	q 12-> can be done by using priority_queue
	Q 13-> unordered_map<int,int>mp;
        for(auto it:nums){
        int rem=it%k;
        mp[rem]++;
        }
        for(auto it:nums){
            int rem=it%k;
            if(rem==0){
               
                if(mp[rem]%2==1){
                    return false;
                }
            }else if(2*rem==k){
                if(mp[rem]%2==1){
                    return false;
                } 
            }else{
                if(mp[rem]!=mp[k-rem]){
                    return false;
                }
            }
        }
        return true;
	Q14->class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
      int i=0,j=0;
      int n=nums.size();
      int mn=INT_MAX;
      int sum=0;
      while(j<n){
sum+=nums[j];
        if(sum<target){
j++;
        }else if(sum>=target){
mn=min(mn,j-i+1);
          while(sum>=target){
            sum-=nums[i];
           
            mn=min(mn,j-i+1);
            i++;
}
          j++;
        
        }
      }
      if(mn!=INT_MAX){
 return mn;
      }else{
return 0;
      }
     
        
    }
};
Q 15->{
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
      int i=0,j=0;
      int n=nums.size();
      int mn=INT_MAX;
      int sum=0;
      while(j<n){
sum+=nums[j];
        if(sum<target){
j++;
        }else if(sum>=target){
mn=min(mn,j-i+1);
          while(sum>=target){
            sum-=nums[i];
           
            mn=min(mn,j-i+1);
            i++;
}
          j++;
        
        }
      }
      if(mn!=INT_MAX){
 return mn;
      }else{
return 0;
      }
     
        
    }
};
