q1-> int dp[501][201][2];
  int solve(int k,int n,int a[],int cur,int buy){
      if(cur>=n) return 0;
      if(!k) return 0;
      if(dp[cur][k][buy]!=-1) return dp[cur][k][buy];
      
      if(buy){
          int sell=a[cur]+solve(k-1,n,a,cur+1,0);
          int notsell=solve(k,n,a,cur+1,buy);
          return dp[cur][k][buy]= max(sell,notsell);
      }else{
          int buy1=solve(k,n,a,cur+1,1)-a[cur];
          int notbuy1=solve(k,n,a,cur+1,buy);
          return dp[cur][k][buy]=max(buy1,notbuy1);
      }
      
  }
    int maxProfit(int K, int N, int A[]) {
        // code here
        memset(dp,-1,sizeof(dp));
        return solve(K,N,A,0,0);
     
        }
    
};
q2->/
 vector<vector<string>> displayContacts(int n, string contact[], string s)
    {
        // code here
        set<string>mp;
       vector<vector<string>>ans(s.size());
       for(int i=0;i<n;i++){
           mp.insert(contact[i]);
       }
       for(int i=0;i<s.size();i++){
           for(auto it:mp){
               if(s.substr(0,i+1)==it.substr(0,i+1)){
                   ans[i].push_back(it);
               }
           }
           if(ans[i].size()==0){
               ans[i].push_back(to_string(0));
           }
       }
       return ans;
    }
};
q3-> vector<vector<string>> displayContacts(int n, string contact[], string s)
    {
        // code here
        set<string>mp;
       vector<vector<string>>ans(s.size());
       for(int i=0;i<n;i++){
           mp.insert(contact[i]);
       }
       for(int i=0;i<s.size();i++){
           for(auto it:mp){
               if(s.substr(0,i+1)==it.substr(0,i+1)){
                   ans[i].push_back(it);
               }
           }
           if(ans[i].size()==0){
               ans[i].push_back(to_string(0));
           }
       }
       return ans;
    }
};
24->
    public:
    void linkdelete(struct Node  *head, int M, int N)
    {
      struct Node *p;
       struct Node *q;
       p=head;
       while(1){
           for(int i=0; i<M-1 ;i++){
               if(p==NULL)
                   return;
               p=p->next;
           }
           if(p==NULL)
               return;
           q=p;
           for(int i=0; i<N ;i++){
               if(q==NULL){
                   p->next=NULL;
                   return;
               }
               q=q->next;
           }
           if(q==NULL){
                   p->next=NULL;
                   return;
               }
           p->next=q->next;
           p=q->next;
       }
       q5->
           int data;
    Node* left;
    Node* right;
}; */


class Solution
{
    public:
    //Function to serialize a tree and return a list containing nodes of tree.
  void helper2(Node *root,vector<int>&a) 
    {
        if(root==NULL)
        {
            a.push_back(int(NULL));
            return;
        }
        a.push_back(root->data);
        helper2(root->left,a);
        helper2(root->right,a);
        return ;
        
    }
    //Function to serialize a tree and return a list containing nodes of tree.
    vector<int> serialize(Node *root) 
    {
        vector<int>a;
        helper2(root,a);
        return a;
    }
    
    
    //Function to deserialize a list and construct the tree.
   int idx=0;
    Node * deSerialize(vector<int> &a)
    {
        if((a.size()-1)<idx||a[idx]==NULL)
       {
           idx++;
           return NULL;
       }
       Node*root=new Node(a[idx++]);
       root->left=deSerialize(a);
       root->right=deSerialize(a);
       return root;
    }

};
q6->    {
        // your code here
        string result = "";
while(n){
char c = 'A' + (n - 1) %26;
result = c + result;
n = (n - 1)/26;

}
return result;
    }
};
q7->    {
        // your code here
     queue<int> q;
		    string temp="";
		    int arr[26]={0};
		    for(int i=0;i<A.size();i++){
		        arr[A[i]-'a']++;
		        if(arr[A[i]-'a']==1){
		            q.push(A[i]);
		        }
		        while(!q.empty() && arr[q.front()-'a']!=1){
		            q.pop();
		        }
		        if(q.empty()){
		            A[i]='#';
		        }else{
		            A[i]=q.front();
		        }
		    }
		    return A;
		}
    q8->
       int size = arr.size();
        int *prefix = new int[size+1]();
        
        int *suffix = new int[size+1]();
      
        
        prefix[0] = 0;
        for(int i = 1 ; i < size ; i ++) {
        
            
            if(arr[i] > arr[i - 1]) {
                prefix[i] = prefix[i-1] + 1;
            }
            else {
                prefix[i] = 0;
            }
        }
        
        suffix[size-1] = 0;
       for(int i = size -1  ; i > 0 ; i--) {
       
           if(arr[i-1] > arr[i]) {
               suffix[i - 1] = suffix[i] + 1;
           }
           else {
               suffix[i-1] = 0;
           }
      }
    
      int ans = 0;
      for(int i = 0 ; i < size ; i ++) {
         if(prefix[i] > 0 && suffix[i] > 0)
             ans = max(prefix[i]+ suffix[i] + 1,  ans); 
       }
       
       return (ans < 3 ? 0 : ans);

    }
    Q9-> int isValid(vector<vector<int>> mat){
        int row[9][9]={0},col[9][9]={0},box[9][9]={0};
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            {
                if(mat[i][j]!=0){
                row[i][mat[i][j]-1]++;
                col[j][mat[i][j]-1]++;
                box[(i/3)*3 + j/3][mat[i][j]-1]++;
                if(row[i][mat[i][j]-1]>1 || col[j][mat[i][j]-1]>1 || box[(i/3)*3 + j/3][mat[i][j]-1]>1)
                return 0;
                }
                
            }
        }
        return 1;
    }
};
Q10->
 int isValid(vector<vector<int>> mat){
        int row[9][9]={0},col[9][9]={0},box[9][9]={0};
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            {
                if(mat[i][j]!=0){
                row[i][mat[i][j]-1]++;
                col[j][mat[i][j]-1]++;
                box[(i/3)*3 + j/3][mat[i][j]-1]++;
                if(row[i][mat[i][j]-1]>1 || col[j][mat[i][j]-1]>1 || box[(i/3)*3 + j/3][mat[i][j]-1]>1)
                return 0;
                }
                
            }
        }
        return 1;
    }
};
Q11->
 int isValid(vector<vector<int>> mat){
        int row[9][9]={0},col[9][9]={0},box[9][9]={0};
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            {
                if(mat[i][j]!=0){
                row[i][mat[i][j]-1]++;
                col[j][mat[i][j]-1]++;
                box[(i/3)*3 + j/3][mat[i][j]-1]++;
                if(row[i][mat[i][j]-1]>1 || col[j][mat[i][j]-1]>1 || box[(i/3)*3 + j/3][mat[i][j]-1]>1)
                return 0;
                }
                
            }
        }
        return 1;
    }
};
Q12->
 vector<vector<string>> displayContacts(int n, string contact[], string s)
    {
        // code here
        set<string>mp;
       vector<vector<string>>ans(s.size());
       for(int i=0;i<n;i++){
           mp.insert(contact[i]);
       }
       for(int i=0;i<s.size();i++){
           for(auto it:mp){
               if(s.substr(0,i+1)==it.substr(0,i+1)){
                   ans[i].push_back(it);
               }
           }
           if(ans[i].size()==0){
               ans[i].push_back(to_string(0));
           }
       }
       return ans;
    }
};
q13->    //when order does not matter.
    long long countWays(int n)
    {
        // your code here
           return n/2+1;
    }
};
q14->class Solution {
public:
int orangesRotting(vector<vector<int>>& grid) {
        if(grid.empty()) return 0;
        int m = grid.size(), n = grid[0].size(), days = 0, tot = 0, cnt = 0;
        queue<pair<int, int>> rotten;
        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                if(grid[i][j] != 0) tot++;
                if(grid[i][j] == 2) rotten.push({i, j});
            }
        }
        
        int dx[4] = {0, 0, 1, -1};
        int dy[4] = {1, -1, 0, 0};
        
        while(!rotten.empty()){
            int k = rotten.size();
            cnt += k; 
            while(k--){
                int x = rotten.front().first, y = rotten.front().second;
                rotten.pop();
                for(int i = 0; i < 4; ++i){
                    int nx = x + dx[i], ny = y + dy[i];
                    if(nx < 0 || ny < 0 || nx >= m || ny >= n || grid[nx][ny] != 1) continue;
                   else if(grid[nx][ny]==1){
                     grid[nx][ny] = 2;
                    rotten.push({nx, ny});
                                           }
                }
            }
            if(!rotten.empty()) days++;
        }
        
        return tot == cnt ? days : -1;
    }
   
};
q15->int solve(int arr[], int i, int j){
    if(i>=j)
        return 0;
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    int ans = INT_MAX;
    for(int k=i;k<=j-1;k++){
        int left,right;
        if(dp[i][k]!=-1)
            left = dp[i][k];
        else 
            left = solve(arr,i,k);
        if(dp[k+1][j]!=-1)
            right = dp[k+1][j];
        else 
            right = solve(arr,k+1,j); 
        int temp = left+right+ arr[i-1]*arr[k]*arr[j];
        if(temp<ans){
            ans = temp;
            bracket[i][j]=k;
        }
    }
    return dp[i][j] = ans;
}

